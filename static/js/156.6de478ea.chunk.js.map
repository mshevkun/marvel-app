{"version":3,"file":"static/js/156.6de478ea.chunk.js","mappings":"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","sources":["components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport AppBanner from \"../appBanner/AppBanner\";\nimport setContent from '../../utils/setContent';\n\nconst SinglePage = ({Component, dataType}) => {\n        const {id} = useParams();\n        const [data, setData] = useState(null);\n        const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\n\n        useEffect(() => {\n            updateData();\n            // eslint-disable-next-line\n        }, [id])\n\n        const updateData = () => {\n            clearError();\n\n            switch (dataType) {\n                case 'comic':\n                    getComic(id).then(onDataLoaded).then(() => setProcess('confirmed'));\n                    break;\n                case 'character':\n                    getCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'));\n                    break;\n                default:\n                    return;\n            }\n        }\n\n        const onDataLoaded = (data) => {\n            setData(data);\n        }\n\n        return (\n            <>\n                <AppBanner/>\n                {setContent(process, Component, data)}\n            </>\n        )\n}\n\nexport default SinglePage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\tconst { request, clearError, process, setProcess } = useHttp();\n\n\tconst _apiBase = \"https://marvel-server-zeta.vercel.app/\";\n\tconst _apiKey = \"apikey=d4eecb0c66dedbfae4eab45d312fc1df\";\n\tconst _baseOffset = 0;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tclearError,\n\t\tprocess,\n\t\tsetProcess,\n\t\tgetAllCharacters,\n\t\tgetCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n\t};\n};\n\nexport default useMarvelService;\n","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'confirmed':\n            return <Component data={data}/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","_jsxs","_Fragment","children","_jsx","AppBanner","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","getCharacterByName","res","getAllComics","ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","className","avengers","avengersLogo","Skeleton","Spinner"],"sourceRoot":""}
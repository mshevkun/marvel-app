{"version":3,"file":"static/js/224.5af11c1f.chunk.js","mappings":"6HAEO,MC8EP,EA9EyBA,KACxB,MAAM,QAAEC,EAAO,WAAEC,EAAU,QAAEC,EAAO,WAAEC,GDDhBC,MACnB,MAAOF,EAASC,IAAcE,EAAAA,EAAAA,UAAS,WA0BvC,MAAO,CAACL,SAxBQM,EAAAA,EAAAA,cAAYC,eAAOC,GAAsF,IAAjFC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAAOG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMI,EAAOJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,eAAgB,oBAE5FP,EAAW,WAEX,IACI,MAAMY,QAAiBC,MAAMR,EAAK,CAACC,SAAQI,OAAMC,YAEjD,IAAKC,EAASE,GACV,MAAM,IAAIC,MAAM,mBAAmBV,cAAgBO,EAASI,UAKhE,aAFmBJ,EAASK,MAGhC,CAAE,MAAMC,GAEJ,MADAlB,EAAW,SACLkB,CACV,CACJ,GAAG,IAMcpB,YAJEK,EAAAA,EAAAA,cAAY,KAC3BH,EAAW,UAAU,GACtB,IAE0BD,UAASC,aAAW,EC1BCC,GAE/CkB,EAAW,4CACXC,EAAU,0CAgCVC,EAAuBC,IACrB,CACNC,GAAID,EAAKC,GACTC,KAAMF,EAAKE,KACXC,YAAaH,EAAKG,YACf,GAAGH,EAAKG,YAAYC,MAAM,EAAG,UAC7B,6CACHC,UAAWL,EAAKK,UAAUC,KAAO,IAAMN,EAAKK,UAAUE,UACtDC,SAAUR,EAAKS,KAAK,GAAG1B,IACvB2B,KAAMV,EAAKS,KAAK,GAAG1B,IACnB4B,OAAQX,EAAKW,OAAOC,QAIhBC,EAAoBF,IAAY,IAADG,EACpC,MAAO,CACNb,GAAIU,EAAOV,GACXc,MAAOJ,EAAOI,MACdZ,YAAaQ,EAAOR,aAAe,0BACnCa,UAAWL,EAAOK,UACf,GAAGL,EAAOK,eACV,2CACHX,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DU,UAA+B,QAArBH,EAAAH,EAAOO,YAAY,UAAE,IAAAJ,OAAA,EAArBA,EAAuBG,WAAY,QAC7CE,MAAOR,EAAOS,OAAO,GAAGD,MACrB,GAAGR,EAAOS,OAAO,GAAGD,SACpB,gBACH,EAGF,MAAO,CACN3C,aACAC,UACAC,aACA2C,iBA/DwBvC,iBAAiC,IAA1BwC,EAAMrC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFlB,IAMnB,aAHkBV,EACjB,GAAGsB,8BAAqCyB,KAAUxB,MAExCyB,KAAKC,QAAQC,IAAI1B,EAC7B,EA2DC2B,mBAzD0B5C,gBACRP,EAAQ,GAAGsB,oBAA2BK,KAAQJ,MACrDyB,KAAKC,QAAQC,IAAI1B,GAwD5B4B,aArDoB7C,UACpB,MAAM8C,QAAYrD,EAAQ,GAAGsB,eAAsBI,KAAMH,KACzD,OAAOC,EAAoB6B,EAAIL,KAAKC,QAAQ,GAAG,EAoD/CK,aAjDoB/C,iBAAuB,IAAhBwC,EAAMrC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAIpC,aAHkBV,EACjB,GAAGsB,8CAAqDyB,KAAUxB,MAExDyB,KAAKC,QAAQC,IAAIZ,EAC7B,EA6CCiB,SA3CgBhD,UAChB,MAAM8C,QAAYrD,EAAQ,GAAGsB,WAAkBI,KAAMH,KACrD,OAAOe,EAAiBe,EAAIL,KAAKC,QAAQ,GAAG,EA0C5C,C,yGC3EF,MAMA,EANqBO,KAEbC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAAQC,UAAW,UAAWC,OAAQ,UAAYC,IAAKC,EAAKC,IAAI,S,mKCGhI,MA+CMC,EAAOC,IAAa,IAAZ,KAACpB,GAAKoB,EAChB,MAAM,KAACzC,EAAI,YAAEC,EAAW,UAAEE,EAAS,SAAEG,EAAQ,KAAEE,GAAQa,EACvD,IAAIqB,EAAW,CAAC,UAAc,SAK9B,MAJkB,wEAAdvC,IACAuC,EAAW,CAAC,UAAc,aAI1BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9Bf,EAAAA,EAAAA,KAAA,OAAKO,IAAKlC,EAAWoC,IAAI,mBAAmBK,UAAU,kBAAkBb,MAAOW,KAC/EC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7Bf,EAAAA,EAAAA,KAAA,KAAGc,UAAU,mBAAkBC,SAAE7C,KACjC8B,EAAAA,EAAAA,KAAA,KAAGc,UAAU,oBAAmBC,SAC3B5C,KAEL0C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7Bf,EAAAA,EAAAA,KAAA,KAAGgB,KAAMxC,EAAUsC,UAAU,sBAAqBC,UAC9Cf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOC,SAAC,gBAE3Bf,EAAAA,EAAAA,KAAA,KAAGgB,KAAMtC,EAAMoC,UAAU,2BAA0BC,UAC/Cf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOC,SAAC,mBAIjC,EAId,EA3EmBE,KAEf,MAAOjD,EAAMkD,IAAWtE,EAAAA,EAAAA,UAAS,OAC3B,aAAC+C,EAAY,WAAEnD,EAAU,QAAEC,EAAO,WAAEC,IAAcJ,EAAAA,EAAAA,MAExD6E,EAAAA,EAAAA,YAAU,KACNC,IACA,MAAMC,EAAUC,YAAYF,EAAY,KAExC,MAAO,KACHG,cAAcF,EAAQ,CACzB,GAEF,IAEH,MAAMG,EAAgBxD,IAClBkD,EAAQlD,EAAK,EAGXoD,EAAaA,KACf5E,IACA,MAAMyB,EAAKwD,KAAKC,MAAmB,IAAbD,KAAKE,UAAkC,OAC7DhC,EAAa1B,GACR2D,KAAKJ,GACLI,MAAK,IAAMlF,EAAW,cAAa,EAG5C,OACImE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACtBc,EAAAA,EAAAA,GAAWpF,EAASiE,EAAM1C,IAC3B6C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,oBAAmBC,SAAA,CAAC,+BACFf,EAAAA,EAAAA,KAAA,SAAK,6CAGpCA,EAAAA,EAAAA,KAAA,KAAGc,UAAU,oBAAmBC,SAAC,2BAGjCf,EAAAA,EAAAA,KAAA,UAAQ8B,QAASV,EAAYN,UAAU,sBAAqBC,UACxDf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOC,SAAC,cAE3Bf,EAAAA,EAAAA,KAAA,OAAKO,IAAKwB,EAAStB,IAAI,UAAUK,UAAU,gCAE7C,E,4CCxCd,MAqHA,EAtGkBkB,IAEd,MAAOC,EAAUC,IAAetF,EAAAA,EAAAA,UAAS,KAClCuF,EAAgBC,IAAqBxF,EAAAA,EAAAA,WAAS,IAC9C0C,EAAQ+C,IAAazF,EAAAA,EAAAA,UAAS,MAC9B0F,EAAWC,IAAgB3F,EAAAA,EAAAA,WAAS,IAErC,iBAACyC,EAAgB,QAAE5C,EAAO,WAAEC,IAAcJ,EAAAA,EAAAA,MAEhD6E,EAAAA,EAAAA,YAAU,KACNqB,EAAUlD,GAAQ,EAAK,GAExB,IAEH,MAAMkD,EAAYA,CAAClD,EAAQmD,KACbL,GAAVK,GACApD,EAAiBC,GACZsC,KAAKc,GACLd,MAAK,IAAMlF,EAAW,cAAa,EAGtCgG,EAAmB5F,UACrB,IAAI6F,GAAQ,EACRC,EAAY1F,OAAS,IACrByF,GAAQ,GAEZT,EAAY,IAAID,KAAaW,IAC7BR,GAAkB,GAClBC,EAAU/C,EAAS,GACnBiD,EAAaI,EAAM,EAGjBE,GAAWC,EAAAA,EAAAA,QAAO,IAElBC,EAAe9E,IACjB4E,EAASG,QAAQC,SAAQC,GAAQA,EAAKC,UAAUC,OAAO,yBACvDP,EAASG,QAAQ/E,GAAIkF,UAAUE,IAAI,uBACnCR,EAASG,QAAQ/E,GAAIqF,OAAO,EA0C1BC,GAAWC,EAAAA,EAAAA,UAAQ,IA9FV3B,EAACpF,EAASgH,EAAWtB,KACpC,OAAQ1F,GACJ,IAAK,UACD,OAAOuD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAO,IACnB,IAAK,UACD,OAAOvB,GAAiBnC,EAAAA,EAAAA,KAACyD,EAAS,KAAKzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAO,IACnD,IAAK,YACD,OAAO1D,EAAAA,EAAAA,KAACyD,EAAS,IACrB,IAAK,QACD,OAAOzD,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IACxB,QACI,MAAM,IAAItC,MAAM,4BACxB,EAmFWoE,CAAWpF,GAAS,IAxCXkH,KAChB,MAAM/E,EAAS+E,EAAIlE,KAAI,CAACyD,EAAMU,KAC1B,IAAIhD,EAAW,CAAC,UAAc,SAK9B,MAJuB,wEAAnBsC,EAAK7E,YACLuC,EAAW,CAAC,UAAc,WAI1BZ,EAAAA,EAAAA,KAAC6D,EAAAA,EAAa,CAAeC,QAAS,IAAKC,WAAW,aAAYhD,UAC9DF,EAAAA,EAAAA,MAAA,MACIC,UAAU,aACVkD,SAAU,EACVC,IAAKC,GAAMrB,EAASG,QAAQY,GAAKM,EACjCpC,QAASA,KACLE,EAAMmC,eAAejB,EAAKjF,IAC1B8E,EAAYa,EAAE,EAElBQ,WAAaxG,IACK,MAAVA,EAAEyG,KAAyB,UAAVzG,EAAEyG,MACnBrC,EAAMmC,eAAejB,EAAKjF,IAC1B8E,EAAYa,GAChB,EACF7C,SAAA,EACEf,EAAAA,EAAAA,KAAA,OAAKO,IAAK2C,EAAK7E,UAAWoC,IAAKyC,EAAKhF,KAAM+B,MAAOW,KACjDZ,EAAAA,EAAAA,KAAA,OAAKc,UAAU,aAAYC,SAAEmC,EAAKhF,WAhB1BgF,EAAKjF,GAkBT,IAIxB,OACI+B,EAAAA,EAAAA,KAAA,MAAIc,UAAU,aAAYC,UACtBf,EAAAA,EAAAA,KAACsE,EAAAA,EAAe,CAACC,UAAW,KAAKxD,SAC5BnC,KAEJ,EAKwB4F,CAAYvC,IAAWE,IAEzD,CAAC1F,IAEJ,OACIoE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBwC,GACDvD,EAAAA,EAAAA,KAAA,UACIyE,SAAUtC,EACVlC,MAAO,CAAC,QAAYqC,EAAY,OAAS,SACzCxB,UAAU,mCACVgB,QAASA,IAAMU,EAAUlD,GAAQyB,UACjCf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOC,SAAC,kBAEzB,EC7ERL,EAAOC,IAAa,IAAZ,KAACpB,GAAKoB,EAChB,MAAM,KAACzC,EAAI,YAAEC,EAAW,UAAEE,EAAS,SAAEG,EAAQ,KAAEE,EAAI,OAAEC,GAAUY,EAE/D,IAAIqB,EAAW,CAAC,UAAc,SAK9B,MAJkB,wEAAdvC,IACAuC,EAAW,CAAC,UAAc,aAI1BC,EAAAA,EAAAA,MAAA6D,EAAAA,SAAA,CAAA3D,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBf,EAAAA,EAAAA,KAAA,OAAKO,IAAKlC,EAAWoC,IAAKvC,EAAM+B,MAAOW,KACvCC,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,kBAAiBC,SAAE7C,KAClC2C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBf,EAAAA,EAAAA,KAAA,KAAGgB,KAAMxC,EAAUsC,UAAU,sBAAqBC,UAC9Cf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOC,SAAC,gBAE3Bf,EAAAA,EAAAA,KAAA,KAAGgB,KAAMtC,EAAMoC,UAAU,2BAA0BC,UAC/Cf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOC,SAAC,qBAKvCf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,cAAaC,SACvB5C,KAEL6B,EAAAA,EAAAA,KAAA,OAAKc,UAAU,eAAcC,SAAC,aAC9BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,oBAAmBC,SAAA,CAC5BpC,EAAOzB,OAAS,EAAI,KAAO,yCAExByB,EAAOc,KAAI,CAACyD,EAAMU,KAEd,KAAIA,EAAI,GACR,OACI5D,EAAAA,EAAAA,KAAA,MAAYc,UAAU,oBAAmBC,SACpCmC,EAAKhF,MADD0F,EAEJ,SAKtB,EAQX,EApFkB5B,IAEd,MAAOhE,EAAMkD,IAAWtE,EAAAA,EAAAA,UAAS,OAE3B,aAAC+C,EAAY,WAAEnD,EAAU,QAAEC,EAAO,WAAEC,IAAcJ,EAAAA,EAAAA,MAExD6E,EAAAA,EAAAA,YAAU,KACNC,GAAY,GAEb,CAACY,EAAM2C,SAEV,MAAMvD,EAAaA,KACf,MAAM,OAACuD,GAAU3C,EACZ2C,IAILnI,IACAmD,EAAagF,GACR/C,KAAKJ,GACLI,MAAK,IAAMlF,EAAW,eAAa,EAGtC8E,EAAgBxD,IAClBkD,EAAQlD,EAAK,EAGjB,OACIgC,EAAAA,EAAAA,KAAA,OAAKc,UAAU,aAAYC,UACtBc,EAAAA,EAAAA,GAAWpF,EAASiE,EAAM1C,IACzB,E,kCC5Bd,MAiEA,EAjEuB4G,KACnB,MAAO5G,EAAMkD,IAAWtE,EAAAA,EAAAA,UAAS,OAC3B,mBAAC8C,EAAkB,WAAElD,EAAU,QAAEC,EAAO,WAAEC,IAAcJ,EAAAA,EAAAA,KAExDkF,EAAgBxD,IAClBkD,EAAQlD,EAAK,EAWX6G,EAA2B,UAAZpI,GAAsBuD,EAAAA,EAAAA,KAAA,OAAKc,UAAU,8BAA6BC,UAACf,EAAAA,EAAAA,KAACD,EAAAA,EAAY,MAAY,KAC3GP,EAAWxB,EAAcA,EAAKd,OAAS,GAC7B2D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,CAAC,mBAAiB/C,EAAK,GAAGE,KAAK,aACpE8B,EAAAA,EAAAA,KAAC8E,EAAAA,GAAI,CAACC,GAAI,eAAe/G,EAAK,GAAGC,KAAM6C,UAAU,2BAA0BC,UACvEf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOC,SAAC,kBAG/Bf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,qBAAoBC,SAAC,8DAP5B,KAWxB,OACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9Bf,EAAAA,EAAAA,KAACgF,EAAAA,GAAM,CACHC,cAAiB,CACbC,SAAU,IAEdC,iBAAoBC,EAAAA,GAAW,CAC3BF,SAAUE,EAAAA,KAAaC,SAAS,4BAEpCC,SAAa3E,IAAiB,IAAhB,SAACuE,GAASvE,EA7BhBzC,QA8BOgH,EA7BvB1I,IAEAkD,EAAmBxB,GACd0D,KAAKJ,GACLI,MAAK,IAAMlF,EAAW,cAyBK,EACtBqE,UAEFF,EAAAA,EAAAA,MAAC0E,EAAAA,GAAI,CAAAxE,SAAA,EACDf,EAAAA,EAAAA,KAAA,SAAOc,UAAU,qBAAqB0E,QAAQ,WAAUzE,SAAC,kCACzDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCf,EAAAA,EAAAA,KAACyF,EAAAA,GAAK,CACFxH,GAAG,WACHC,KAAK,WACLwH,KAAK,OACLC,YAAY,gBAChB3F,EAAAA,EAAAA,KAAA,UACI0F,KAAK,SACL5E,UAAU,sBACV2D,SAAsB,YAAZhI,EAAsBsE,UAChCf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOC,SAAC,eAG/Bf,EAAAA,EAAAA,KAAC4F,EAAAA,GAAkB,CAACrB,UAAU,MAAMzD,UAAU,qBAAqB5C,KAAK,kBAG/EsB,EACAqF,IACC,ECpEd,MAAMgB,UAAsBpC,EAAAA,UAAUqC,WAAAA,GAAA,SAAA7I,WAAA,KAClC8I,MAAQ,CACJC,OAAO,EACV,CAEDC,iBAAAA,CAAkBD,EAAOE,GACrBC,QAAQC,IAAIJ,EAAOE,GACnBG,KAAKC,SAAS,CACVN,OAAO,GAEf,CAEAO,MAAAA,GACI,OAAIF,KAAKN,MAAMC,OACJhG,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAGjBsG,KAAKrE,MAAMjB,QACtB,EAGJ,U,qDCoBA,EAjCiByF,KACf,MAAOC,EAAcvF,IAAWtE,EAAAA,EAAAA,UAAS,MAKzC,OACEiE,EAAAA,EAAAA,MAAA6D,EAAAA,SAAA,CAAA3D,SAAA,EACEF,EAAAA,EAAAA,MAAC6F,EAAAA,EAAM,CAAA3F,SAAA,EACLf,EAAAA,EAAAA,KAAA,QAAM9B,KAAK,cAAcyI,QAAQ,gBACjC3G,EAAAA,EAAAA,KAAA,SAAAe,SAAO,mBAETf,EAAAA,EAAAA,KAAC6F,EAAa,CAAA9E,UACZf,EAAAA,EAAAA,KAACiB,EAAU,OAEbJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5Bf,EAAAA,EAAAA,KAAC6F,EAAa,CAAA9E,UACZf,EAAAA,EAAAA,KAAC4G,EAAQ,CAACzC,eAdMlG,IACtBiD,EAAQjD,EAAG,OAeP4C,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEf,EAAAA,EAAAA,KAAC6F,EAAa,CAAA9E,UACZf,EAAAA,EAAAA,KAAC6G,EAAQ,CAAClC,OAAQ8B,OAEpBzG,EAAAA,EAAAA,KAAC6F,EAAa,CAAA9E,UACZf,EAAAA,EAAAA,KAAC4E,EAAc,aAIrB5E,EAAAA,EAAAA,KAAA,OAAKc,UAAU,gBAAgBP,IAAKuG,EAAYrG,IAAI,aACnD,C,mECtCP,MAiBA,EAjBiBsG,KAETlG,EAAAA,EAAAA,MAAA6D,EAAAA,SAAA,CAAA3D,SAAA,EACIf,EAAAA,EAAAA,KAAA,KAAGc,UAAU,eAAcC,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCf,EAAAA,EAAAA,KAAA,OAAKc,UAAU,4BACfd,EAAAA,EAAAA,KAAA,OAAKc,UAAU,6BAEnBd,EAAAA,EAAAA,KAAA,OAAKc,UAAU,2BACfd,EAAAA,EAAAA,KAAA,OAAKc,UAAU,2BACfd,EAAAA,EAAAA,KAAA,OAAKc,UAAU,gCCM/B,EAfmBe,CAACpF,EAASgH,EAAWlE,KACpC,OAAQ9C,GACJ,IAAK,UACD,OAAOuD,EAAAA,EAAAA,KAAC+G,EAAQ,IACpB,IAAK,UACD,OAAO/G,EAAAA,EAAAA,KAAC0D,EAAAA,EAAO,IACnB,IAAK,YACD,OAAO1D,EAAAA,EAAAA,KAACyD,EAAS,CAAClE,KAAMA,IAC5B,IAAK,QACD,OAAOS,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IACxB,QACI,MAAM,IAAItC,MAAM,4BACxB,C","sources":["hooks/http.hook.js","services/MarvelService.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\tconst { request, clearError, process, setProcess } = useHttp();\n\n\tconst _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n\tconst _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\n\tconst _baseOffset = 210;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tclearError,\n\t\tprocess,\n\t\tsetProcess,\n\t\tgetAllCharacters,\n\t\tgetCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n\t};\n};\n\nexport default useMarvelService;\n","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const renderItems = arr => {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from \"../../resources/img/vision.png\";\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelected = (id) => {\n    setChar(id);\n  };\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Marvel app\" />\n        <title>Marvel app</title>\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <div>\n          <ErrorBoundary>\n            <CharInfo charId={selectedChar} />\n          </ErrorBoundary>\n          <ErrorBoundary>\n            <CharSearchForm />\n          </ErrorBoundary>\n        </div>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  );\n};\n\nexport default MainPage;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'confirmed':\n            return <Component data={data}/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["useMarvelService","request","clearError","process","setProcess","useHttp","useState","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","json","e","_apiBase","_apiKey","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","data","results","map","getCharacterByName","getCharacter","res","getAllComics","getComic","ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setnewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","ended","newCharList","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","key","TransitionGroup","component","renderItems","disabled","_Fragment","charId","CharSearchForm","errorMessage","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","constructor","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","Skeleton"],"sourceRoot":""}